1) npx create-expo-app 5thProject-Native // cd 5thProject-Native // git init // git add . // git commit -m "Initial commit"
2) create screens
3) setup navigation " npm install @react-navigation/native " // " npx expo install react-native-screens react-native-safe-area-context " // " npm install @react-navigation/native-stack " // " npm install @react-navigation/bottom-tabs "
4) add navigation to app.js
5) styling navigation (with the help of constants/style.js) for colors, header and icons (Ionicans)
6) start adding content & key components. try splitting the contents into components as much as possible
7) component'leri birbirine gerekli verileri aktaracak şekilde mantığını kurduk ve prop'ları bu mantığa göre yerleştirdik
8) verinin düzgün çalıştığını gözlemlemek için dummy_data (test verisi) oluşturduk ve çarkları çevirdik
9) ilk marşı verdiğimize göre, styling i biraz daha detaylandırabiliriz
10) components içerisindeki item'ları oluştururuz. gerekli object destructring'leri sağlarız ve styling'i yaparız (FlatList itemları Pressable olarak ayrı comp. örneğin)
11) tarihi yönetmek için util/date.js içerisinde fonksiyonu oluşturduk
12) Muhtelif içerik eklemeleri, style düzenlemeleri ve içeriği component'lere bölerek düzenlemeye devam
13) İşlevsellik belirli bir boyuta ulaştığı için "dummy_data (test verisi)"ni context olarak app-wide sunmaya başladık (expenses-context.js)
14) context'i tamamladıktan sonra app-wide olarak sunup işlevlerini (tuşlara) tanımladık
15) user input'ların tanımlanmasını yaptık
16) data validation'ları tamamladık
17) validation sonrası hata yönetimi için style değişikliklerini tamamladık

18) google firebase'den real-time-database kurduk
19) request'leri gönderebilmek için Axios'u kurduk (npm install axios)
20) veri ekleme mekanizmasını kurduk ve test ettik
21) veri ekleme, düzenleme ve silmeye dair bütün altyapıyı kurduk. backend'i ayarlarken context'i anlık güncellemelerde kullanabilmek amacıyla iptal etmedik
22) loading spinner detayını ekledik
23) hata yönetimine dair detayları ekledik